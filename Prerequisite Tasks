class Solution {
    public boolean isPossible(int N, int[][] prerequisites)
    {
        //Form a graph
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<N;i++)
        adj.add(new ArrayList<>());
        
        int m=prerequisites.length;
        for(int i=0;i<m;i++)
        adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        
        int indegree[] = new int[N];
        for(int i=0;i<N;i++)
        { 
            for(int it:adj.get(i))
            indegree[it]++;
        }
        
        Queue<Integer> q = new LinkedList<Integer>();
        for(int i=0;i<N;i++)
        { 
            if(indegree[i] == 0)
            q.add(i);
        }
        
        List<Integer> topo = new ArrayList<Integer>();
        while(!q.isEmpty())
        { 
            int node = q.peek();
            q.remove();
            topo.add(node);
            
            //node is in your topo sort
            // so please remove it from indegree
            
            for(int it:adj.get(node))
            { 
                indegree[it]--;
                if(indegree[it] == 0)
                q.add(it);
            }
        }
        
        if(topo.size() == N)  // means topo sort can be generated
        return true;          // means there is no cycle and its a DAG
                              // means tasks can be completed
        
        return false;
    }
}
